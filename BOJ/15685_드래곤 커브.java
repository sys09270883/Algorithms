/*
https://www.acmicpc.net/problem/15685
[문제]
드래곤 커브는 다음과 같은 세 가지 속성으로 이루어져 있으며, 이차원 좌표 평면 위에서 정의된다. 좌표 평면의 x축은 → 방향, y축은 ↓ 방향이다.

시작 점
시작 방향
세대
0세대 드래곤 커브는 아래 그림과 같은 길이가 1인 선분이다. 아래 그림은 (0, 0)에서 시작하고, 시작 방향은 오른쪽인 0세대 드래곤 커브이다.



1세대 드래곤 커브는 0세대 드래곤 커브를 끝 점을 기준으로 시계 방향으로 90도 회전시킨 다음 0세대 드래곤 커브의 끝 점에 붙인 것이다. 
끝 점이란 시작 점에서 선분을 타고 이동했을 때, 가장 먼 거리에 있는 점을 의미한다.



2세대 드래곤 커브도 1세대를 만든 방법을 이용해서 만들 수 있다. (파란색 선분은 새로 추가된 선분을 나타낸다)



3세대 드래곤 커브도 2세대 드래곤 커브를 이용해 만들 수 있다. 아래 그림은 3세대 드래곤 커브이다.



즉, K(K > 1)세대 드래곤 커브는 K-1세대 드래곤 커브를 끝 점을 기준으로 90도 시계 방향 회전 시킨 다음, 그것을 끝 점에 붙인 것이다.

크기가 100×100인 격자 위에 드래곤 커브가 N개 있다. 
이때, 크기가 1×1인 정사각형의 네 꼭짓점이 모두 드래곤 커브의 일부인 정사각형의 개수를 구하는 프로그램을 작성하시오. 
격자의 좌표는 (x, y)로 나타내며, 0 ≤ x ≤ 100, 0 ≤ y ≤ 100만 유효한 좌표이다.

[입력]
첫째 줄에 드래곤 커브의 개수 N(1 ≤ N ≤ 20)이 주어진다. 둘째 줄부터 N개의 줄에는 드래곤 커브의 정보가 주어진다. 
드래곤 커브의 정보는 네 정수 x, y, d, g로 이루어져 있다. x와 y는 드래곤 커브의 시작 점, d는 시작 방향, g는 세대이다. 
(0 ≤ x, y ≤ 100, 0 ≤ d ≤ 3, 0 ≤ g ≤ 10)

입력으로 주어지는 드래곤 커브는 격자 밖으로 벗어나지 않는다. 드래곤 커브는 서로 겹칠 수 있다.

방향은 0, 1, 2, 3 중 하나이고, 다음을 의미한다.

0: x좌표가 증가하는 방향 (→)
1: y좌표가 감소하는 방향 (↑)
2: x좌표가 감소하는 방향 (←)
3: y좌표가 증가하는 방향 (↓)
[출력]
첫째 줄에 크기가 1×1인 정사각형의 네 꼭짓점이 모두 드래곤 커브의 일부인 것의 개수를 출력한다.

[풀이]
문제의 과정은 세 부분으로 나눌 수 있다.
  1. 드래곤커브의 정보를 입력받는 과정
  2. 입력받은 정보를 바탕으로 좌표평면에 점을 찍는 과정
  3. 정사각형의 개수를 확인하는 과정
  
각 단계의 드래곤 커브에서 점을 표시하고 다음 단계의 드래곤 커브를 갱신한다.
다음 단계의 드래곤 커브는 현재 단계의 드래곤 커브의 역순으로 1씩 증가하는 규칙이 있다. ((dir + 1) % 4)
최종적으로 배열을 순회하면서 정사각형의 개수를 센다.

*/
import java.io.*;
import java.util.*;

public class Main {
	
	static int N, endX, endY;
	static ArrayList<Integer> trace;
	static boolean[][] pointSet;
	static int[] dx = {1, 0, -1, 0};
	static int[] dy = {0, -1, 0, 1};
	
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		N = Integer.parseInt(br.readLine());
		pointSet = new boolean[101][101];
		trace = new ArrayList<Integer>();
		StringTokenizer st = null;
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			int x = Integer.parseInt(st.nextToken());
			int y = Integer.parseInt(st.nextToken());
			int dir = Integer.parseInt(st.nextToken());
			int gnr = Integer.parseInt(st.nextToken());
			
			trace.clear();
			
			endX = x;
			endY = y;
			
			pointSet[endX][endY] = true;
			
			endX = x + dx[dir];
			endY = y + dy[dir];
			
			pointSet[endX][endY] = true;
			
			trace.add(dir);
			
			while (gnr-- > 0) {
				addPoint();
			}
		}
		
		bw.write(String.valueOf(countSquare()));
		bw.close();
		br.close();
	}
	
	private static void addPoint() {
		int size = trace.size();
		
		for (int i = size - 1; i >= 0; i--) {
			int dir = (trace.get(i) + 1) % 4;
			
			endX = endX + dx[dir];
			endY = endY + dy[dir];
			
			pointSet[endX][endY] = true;
			
			trace.add(dir);
		}
	}
	
	private static int countSquare() {
		int cnt = 0;
		
		for (int i = 0; i < 100; i++) {
			for (int j = 0; j < 100; j++) {
				if (pointSet[i][j] && pointSet[i + 1][j] && pointSet[i][j + 1] && pointSet[i + 1][j + 1])
					cnt++;
			}
		}
		
		return cnt;
	}
	
}
