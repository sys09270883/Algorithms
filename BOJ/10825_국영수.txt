
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main {
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int N = Integer.parseInt(br.readLine());

		PriorityQueue<StudentInfo> pq = new PriorityQueue<>(N, new studentInfoComparator());
		
		while(N-- > 0){
			StringTokenizer st = new StringTokenizer(br.readLine(), " ");
			StudentInfo si = new StudentInfo(st.nextToken(), Integer.parseInt(st.nextToken()),
					Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()));
			pq.add(si);
		}
		
		StringBuilder sb = new StringBuilder();
		
		while(!pq.isEmpty()){
			StudentInfo tmp = pq.poll();
			sb.append(tmp.name).append('\n');
		}
		
		System.out.println(sb.toString().trim());
		
	}
}

class StudentInfo{
	String name;
	int Kscore;
	int Escore;
	int Mscore;
	
	public StudentInfo(String name, int Kscore, int Escore, int Mscore){
		this.name = name;
		this.Kscore = Kscore;
		this.Escore = Escore;
		this.Mscore = Mscore;
	}
	
	public boolean equalKEM(StudentInfo si){
		if(si.Kscore == this.Kscore && si.Mscore == this.Mscore && si.Escore == this.Escore)
			return true;
		
		return false;
	}
	
	public boolean equalKE(StudentInfo si){
		if(si.Kscore == this.Kscore && si.Escore == this.Escore)
			return true;
		
		return false;
	}
	
	public boolean equalK(StudentInfo si){
		if(si.Kscore == this.Kscore)
			return true;
		
		return false;
		
	}
}

class studentInfoComparator implements Comparator<StudentInfo>{

	@Override
	public int compare(StudentInfo o1, StudentInfo o2) {
		// TODO Auto-generated method stub
		if(o1.equalKEM(o2))
			return o1.name.compareTo(o2.name) > 0 ? 1 : -1;
		
		if(o1.equalKE(o2))
			return o1.Mscore < o2.Mscore ? 1 : -1;
		
		if(o1.equalK(o2))
			return o1.Escore > o2.Escore ? 1 : -1;
		
		return o1.Kscore < o2.Kscore ? 1 : -1;
	}
	
}